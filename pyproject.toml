[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "configmanagelib"
version = "0.1.0"
description = "A modern, flexible, and type-safe configuration management library for Python"
readme = "README.md"
authors = [
    {name = "ConfigManageLib Team", email = "info@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []
requires-python = ">=3.7"

[project.urls]
"Homepage" = "https://github.com/sirhCC/ConfigManageLib"
"Bug Tracker" = "https://github.com/sirhCC/ConfigManageLib/issues"
"Documentation" = "https://github.com/sirhCC/ConfigManageLib/tree/main/docs"
"Source Code" = "https://github.com/sirhCC/ConfigManageLib"

# ============================================================================
# DEVELOPMENT TOOLING CONFIGURATION
# Enterprise-grade code quality tools for zero-compromise standards
# ============================================================================

[tool.black]
# Code formatting - enterprise standard
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
# Import sorting - compatible with black
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["config_manager", "tests", "examples"]
known_first_party = ["config_manager"]
known_third_party = ["pytest", "yaml", "tomli", "cryptography", "requests"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
# Type checking configuration - references mypy.ini for detailed settings
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
show_error_codes = true
pretty = true

[tool.pytest.ini_options]
# Modern testing framework configuration
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=config_manager",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance benchmarks",
    "security: marks tests as security-related",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
# Test coverage configuration
source = ["config_manager"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py",
    "debug_*",
]

[tool.coverage.report]
# Coverage reporting
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.flake8]
# Linting configuration (if used alongside black)
max-line-length = 88
select = ["E", "W", "F"]
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator (conflicts with black)
]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:F401,F811", # test files can have unused imports
]

[tool.bandit]
# Security linting
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert and shell usage in specific contexts

[tool.bandit.assert_used]
# Allow asserts in tests
skips = ["*_test.py", "test_*.py"]

[tool.ruff]
# Fast Python linter (alternative to flake8)
target-version = "py37"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (let developers decide)
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["F401", "F811"]  # test files can have unused imports

[tool.ruff.mccabe]
max-complexity = 10

[tool.docformatter]
# Docstring formatting
pre-summary-newline = true
make-summary-multi-line = true
close-quotes-on-newline = true
