[tox]
# Supported Python versions for testing
envlist = py38,py39,py310,py311,py312,py313,lint,type-check,security,docs
isolated_build = true
skip_missing_interpreters = true

[testenv]
# Base testing environment configuration
description = Run unit tests with pytest
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    coverage[toml]>=7.0.0
    # Optional dependencies for comprehensive testing
    pyyaml>=6.0.0
    toml>=0.10.2
    requests>=2.28.0
    cryptography>=3.4.8
    watchdog>=2.1.9
commands = 
    pytest {posargs:tests/} --cov=config_manager --cov-report=term-missing --cov-report=xml --cov-report=html --cov-fail-under=95 -x -v
setenv =
    COVERAGE_FILE = {envtmpdir}/.coverage
    PYTHONPATH = {toxinidir}
allowlist_externals = 
    coverage
    pytest

[testenv:lint]
# Code formatting and style checking
description = Run linting and formatting checks
deps = 
    black>=23.0.0
    isort>=5.12.0
    flake8>=6.0.0
    ruff>=0.1.0
    docformatter>=1.7.0
commands = 
    black --check --diff config_manager tests examples scripts
    isort --check-only --diff config_manager tests examples scripts
    flake8 config_manager tests examples scripts
    ruff check config_manager tests examples scripts
    docformatter --check --recursive config_manager tests examples scripts

[testenv:format]
# Auto-format code
description = Auto-format code with black and isort
deps = 
    black>=23.0.0
    isort>=5.12.0
    docformatter>=1.7.0
commands = 
    black config_manager tests examples scripts
    isort config_manager tests examples scripts
    docformatter --in-place --recursive config_manager tests examples scripts

[testenv:type-check]
# Type checking with mypy
description = Run static type checking with mypy
deps = 
    mypy>=1.8.0
    types-PyYAML
    types-requests
    types-toml
commands = 
    mypy config_manager tests examples scripts

[testenv:security]
# Security vulnerability scanning
description = Run security checks with bandit
deps = 
    bandit[toml]>=1.7.0
    safety>=2.3.0
commands = 
    bandit -r config_manager -f json -o {envtmpdir}/bandit-report.json
    bandit -r config_manager
    safety check --json --output {envtmpdir}/safety-report.json
    safety check

[testenv:docs]
# Documentation building and testing
description = Build and test documentation
deps = 
    sphinx>=6.0.0
    sphinx-rtd-theme>=1.3.0
    myst-parser>=2.0.0
changedir = docs
commands = 
    sphinx-build -W -b html . _build/html
    sphinx-build -W -b linkcheck . _build/linkcheck

[testenv:performance]
# Performance benchmarking
description = Run performance benchmarks
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    memory-profiler>=0.60.0
commands = 
    pytest tests/test_cache_performance.py --benchmark-only --benchmark-sort=mean
    pytest tests/ -k "performance" --benchmark-disable

[testenv:integration]
# Integration testing with external services
description = Run integration tests
deps = 
    {[testenv]deps}
    docker>=6.0.0
    requests-mock>=1.10.0
setenv = 
    {[testenv]setenv}
    INTEGRATION_TESTS = 1
commands = 
    pytest tests/test_integration.py -v --cov-append

[testenv:coverage]
# Coverage reporting and analysis
description = Generate comprehensive coverage reports
deps = 
    {[testenv]deps}
    coverage[toml]>=7.0.0
commands = 
    coverage erase
    coverage run -m pytest tests/
    coverage report --show-missing --fail-under=95
    coverage html
    coverage xml

[testenv:clean]
# Clean up build artifacts and cache files
description = Clean up build artifacts and cache
deps = 
skip_install = true
allowlist_externals = 
    rm
    find
    powershell
commands = 
    # Windows PowerShell commands for cleanup
    powershell -Command "if (Test-Path .coverage) { Remove-Item .coverage }"
    powershell -Command "if (Test-Path htmlcov) { Remove-Item -Recurse htmlcov }"
    powershell -Command "if (Test-Path .pytest_cache) { Remove-Item -Recurse .pytest_cache }"
    powershell -Command "if (Test-Path build) { Remove-Item -Recurse build }"
    powershell -Command "if (Test-Path dist) { Remove-Item -Recurse dist }"
    powershell -Command "if (Test-Path '*.egg-info') { Remove-Item -Recurse *.egg-info }"
    powershell -Command "Get-ChildItem -Path . -Recurse -Name '__pycache__' | ForEach-Object { Remove-Item -Recurse $_ }"

[testenv:dev]
# Development environment with all tools
description = Development environment with all dependencies
deps = 
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type-check]deps}
    {[testenv:security]deps}
    ipython>=8.0.0
    jupyter>=1.0.0
commands = 
    python -c "print('Development environment ready!')"
    python -c "import config_manager; print(f'ConfigManager version: {config_manager.__version__}')"

# Global tox configuration
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv

[coverage:run]
source = config_manager
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */.*
branch = true

[coverage:report]
exclude_lines = 
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    @abstract
precision = 2
show_missing = true
skip_covered = false
